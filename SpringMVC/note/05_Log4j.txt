05_Log4j.txt

#Log4j
· 로그를 남기는 기능들이 구현 되어있는 라이브러리
· sysout보다 훨씬 체계적인 방식으로 로그를 남길 수 있다
· 각 로그마다 등급을 설정하고 일정 등급 이상의 로그만 보도록 설정할 수 있다

# Logger
· 로그를 수집하는 객체
· 해당 클래스에서 발생하는 로그만을 수집하여 Appender로 보낸다

# Appender
· 수집된 로그들을 출력하는 장소
· 파일, 콘솔, DB 등으로 발생한 로그들을 출력할 수 있다

# Layout
· 로그를 어떤 모양으로 기록할지에 대한 설정

# Log4j 보안 이슈
· 기존 log4j(log4j1)에 보안 이슈가 있어서 Log4j-core(log4j2)에서만 해결이 된 상태 

# Log4j logging level
· 심각 OFF : 모든 등급의 로그를 끔
· FATAL : 아주 심각한 로그를 작성할 때 사용하는 등급(아주 심각한 로그만 출력됨)
· ERROR : 심각한 오류를 작성할 때 사용하는 등급(심각 이상의 로그가 모두 출력됨)
· WARN : 경고 등급의 로그를 작성할 때 사용하는 등급 (경고 이상의 로그가 모두 출력됨)
· INFO : 정보 등급의 로그를 작성할 때 사용하는 등급 (정보 이상의 로그가 모두 출력됨)
· DEBUG : 디버깅 등급의 로그를 작성할 때 사용하는 등급 (디버깅 이상의 로그가 모두 출력됨)
· TRACE : 추적 단계 등급의 로그를 작성할 때 사용하는 등급
· ALL : 모든 단계 로그를 모두 출력함
· 심각단계 : FATAL > ERROR > WARN > INFO > DEBUG > TRACE > All (심각 > 덜 심각)
· 중요단계 : FATAL > ERROR > WARN > INFO > DEBUG > TRACE > All (중요 > 덜 중요)

# File Appender 추가해보기
	<!-- File Appender 선언 1 -->
	<appender name="logfile" class="org.apache.log4j.FileAppender">
		<param name="file" value="/log/logfile.txt" /> <!-- C드라이브의 log에 logfile로 감(?) -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" /> <!-- printf와 비슷 -->
		</layout>
	</appender>

	<!-- Root Logger -->
	<root>
		<appender-ref ref="logfile" /> <!-- File Appender 선언하고 이곳에 달아줘야 함 -->
	</root>

# 다른 레이아웃 사용해보기 (HTML 레이아웃)
	<!-- File Appender 선언 2 (html Layout -->
	<appender name="logfile_html" class="org.apache.log4j.FileAppender">
		<param name="file" value="/log/logfile_html.html" /> <!-- C드라이브의 log에 logfile로 감(?) -->
		<layout class="org.apache.log4j.HTMLLayout"/>
	</appender>
	
	<!-- Root Logger -->
	<root>
		<appender-ref ref="logfile_html" />
	</root>